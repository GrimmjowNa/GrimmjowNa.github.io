代码切片
================================

## CommonsChunkPlugin

webpack4废弃了`CommonsChunkPlugin`插件， 使用`optimization.splitChunks`和`optimization.runtimeChunk`代替

## splitChunks

- 将多个Chunk中公共的部分提取出来
  - 减少重复模块打包
  - 提升开发速度
  - 减少整体资源体积
  - 合理分片, 利用客户端缓存

- 提取条件
  - 被多次使用或者位于`node_modules`中的模块
  - 提取后javascript chunk体积大于30k, CSS chunk体积大于50k
  - 并行请求的资源最大值小于5. (按需加载: 通过动态插入script标签加载脚本)
  - 首次加载时, 并行请求资源数最大值小于等于3

```js
const webpack = require('webpack');
module.exports = {
    optimization: {
        splitChunks: {
            chunks: 'all' // 'async'(默认, 异步); 'initial', 'all'
            minSize: 30000,
            minChunks: 1,
            maxAsyncRequests: 5,
            maxInitialRequests: 3,
            automaticNameDelimiter: '~',
            name: true,
            cacheGroups: {
                vendors: {         // node_modules 中符合条件的模块
                    test: /[\\/]node_modules[\\/]/,
                    priority: -10
                },
                default: {        // 多次引用的模块
                    minChunks: 2,
                    priority: -20,
                    reuseExistingChunk: true
                }
            }
        }
    }
}
```

## 异步加载模块

- import函数
  - 原理,动态插入script标签
  - 不需要位于顶层作用域
  - 返回一个Promise对象
- require.ensure
