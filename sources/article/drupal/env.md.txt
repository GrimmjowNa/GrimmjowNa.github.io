开发环境搭建
================================

## 环境安装

```shell
# 安装 mysql
docker run -p 3306:3306\
    -e MYSQL_ROOT_PASSWORD=root \
    -e MYSQL_DATABASE=drupal \
    -e MYSQL_USER=drupal \
    -e MYSQL_PASSWORD=drupal \
    -v "$(pwd)"/mariadb:/var/lib/mysql \
    -d --name drupal-mariadb mariadb

# 访问
docker exec -it drupal-mariadb bash
mysql -u drupal -p
drupal

# 安装 phpadmin
# http://127.0.0.1:8088
sudo docker run -p 8088:80\
    --name drupal-phpadmin \
    --link drupal-mariadb:db \
    -d phpmyadmin/phpmyadmin

# 安装 drupal
docker run -p 81:80 \
    --mount type=bind,source="$(pwd)"/app,target=/var/www/html \
    --name drupal8 \
    --link drupal-mariadb:mysql \
    -d drupal:8.7.8

# 项目代码解压到app路径下
cd "$(pwd)"/app

if [ ! -d sites/default/files  ];then
  mkdir sites/default/files
  mkdir sites/default/files/translations
fi

if [ ! -f sites/default/settings.php  ];then
  cp sites/default/default.settings.php sites/default/settings.php
fi

chmod a+w sites/default/files
chmod a+w sites/default/files/translations
chmod a+w sites/default/settings.php
```

访问 [http://127.0.0.1:81/](http://127.0.0.1:81/)
```


## docker compose

```yaml
version: '3'
services:
    nginx:
        image: nginx:latest
        ports:
            - "8089:80"
        depends_on:
            - "php"
        volumes:
            - "$PWD/docker/conf.d:/etc/nginx/conf.d"
            - "$PWD/docker/logs:/var/log/nginx"
            - "$PWD/www:/usr/share/nginx/html"
        networks:
            - app_drupal
        container_name: "drupal-nginx"
    php:
        build: ./docker/php
        image: php:7.2-fpm-drupal
        ports:
            - "9000:9000"
        volumes:
            - "$PWD/www:/var/www/html"
        networks:
            - app_drupal
        container_name: "drupal-php"
    mysql:
        image: mysql:5.7
        ports:
            - "3307:3306"
        volumes:
            - "$PWD/docker/.data:/var/lib/mysql"
        environment:
            - MYSQL_ROOT_PASSWORD=root
            - MYSQL_DATABASE=drupal
            - MYSQL_USER=drupal
            - MYSQL_PASSWORD=drupal
        networks:
            app_drupal:
                ipv4_address: 10.10.10.1
        container_name: "drupal-mysql"
    phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        ports:
            - "8090:80"
        environment:
          MYSQL_USER: "drupal"
          MYSQL_PASSWORD: "drupal"
          MYSQL_ROOT_PASSWORD: "root"
          PMA_HOST: drupal-mysql
        networks:
            - app_drupal
        container_name: drupal-admin

networks:
    app_drupal:
        driver: bridge
        ipam:
            config:
                - subnet: 10.10.0.0/16
```

nginx

```
server {
    listen      80;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Very rarely should these ever be accessed outside of your lan
    location ~* \.(txt|log)$ {
        allow 192.168.0.0/16;
        deny all;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    rewrite ^/core/authorize.php/core/authorize.php(.*)$ /core/authorize.php$1;

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ (^|/)\. {
        return 403;
    }

    location / {
        # try_files $uri @rewrite; # For Drupal <= 6
        try_files $uri /index.php?$query_string; # For Drupal >= 7
    }

    location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    # Don't allow direct access to PHP files in the vendor directory.
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in
    # the middle, such as update.php/selection. The rule we use is strict,
    # and only allows this pattern with the update.php front controller.
    # This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If
    # you do not have any paths like that, then you might prefer to use a
    # laxer rule, such as:
    #   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL
    # pattern with front controllers other than update.php in a future
    # release.
    location ~ '\.php$|^/update.php' {
        # fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        # # Security note: If you're running a version of PHP older than the
        # # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
        # # See http://serverfault.com/q/627903/94922 for details.
        # include fastcgi_params;
        # # Block httpoxy attacks. See https://httpoxy.org/.
        # fastcgi_param HTTP_PROXY "";
        # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # fastcgi_param PATH_INFO $fastcgi_path_info;
        # fastcgi_param QUERY_STRING $query_string;
        # fastcgi_intercept_errors on;
        # # PHP 5 socket location.
        # #fastcgi_pass unix:/var/run/php5-fpm.sock;
        # # PHP 7 socket location.
        # fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;  #这里改成环境对应的路径，错误会导致502
        fastcgi_pass   php:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
        include        fastcgi_params;
    }

    # Fighting with Styles? This little gem is amazing.
    # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    # Handle private files through Drupal. Private file's path can come
    # with a language prefix.
    location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
        try_files $uri /index.php?$query_string;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        root /usr/share/nginx/html;
        expires max;
        log_not_found on;
    }
}
```

php
```
FROM php:7.2-fpm

RUN apt-get update \
    && apt-get install -y iputils-ping \
        php7.2-gd \
        php7.2-opcache\
    && docker-php-ext-install mysqli && docker-php-ext-enable mysqli

```